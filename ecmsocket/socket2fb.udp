#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <linux/fb.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <string.h>

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <linux/fb.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <stdint.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>
#include <errno.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define FRAMEBUFFER "/dev/fb0"
#define PORT 5000
#define BUFFER_SIZE 7

void set_pixel(uint16_t *fb, int x, int y, uint16_t color, struct fb_var_screeninfo vinfo, struct fb_fix_screeninfo finfo) {
    if (x >= 0 && x < vinfo.xres && y >= 0 && y < vinfo.yres) {
        long location = (x * (vinfo.bits_per_pixel / 8)) + (y * finfo.line_length);
        uint16_t *pixel = (uint16_t *)((uint8_t *)fb + location);
        *pixel = color;

//	printf("set pixel\n\r");
    }

//   printf("setting colour [%d, %d], %d\n\r", x,y,color);
//   printf("screen xres: %d yres: %d\n\r", vinfo.xres, vinfo.yres);
}

int main() {
    int fb_fd = open(FRAMEBUFFER, O_RDWR);
    if (fb_fd < 0) {
        perror("Error opening framebuffer");
        return 1;
    }
    
    struct fb_var_screeninfo vinfo;
    struct fb_fix_screeninfo finfo;
    if (ioctl(fb_fd, FBIOGET_VSCREENINFO, &vinfo) || ioctl(fb_fd, FBIOGET_FSCREENINFO, &finfo)) {    
	//if (ioctl(fb_fd, FBIOGET_VSCREENINFO, &vinfo)) {
        perror("Error reading screen info");
        close(fb_fd);
        return 1;
    }
    
    int width = vinfo.xres;
    int height = vinfo.yres;
    int bytes_per_pixel = vinfo.bits_per_pixel / 8;
    int screensize = width * height * bytes_per_pixel;
    uint16_t *fbp = (uint16_t *)mmap(0, screensize, PROT_READ | PROT_WRITE, MAP_SHARED, fb_fd, 0);
    if ((intptr_t)fbp == -1) {
        perror("Failed to mmap framebuffer");
        close(fb_fd);
        return 1;
    }

    //memset(fbp, 0, screensize); // Clear framebuffer

	    set_pixel(fbp, 250, 250, 0x07E0, vinfo, finfo);          

    
    int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        munmap(fbp, screensize);
        close(fb_fd);
        return 1;
    }
    
    struct sockaddr_in server_addr, client_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);
    
    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(sockfd);
        munmap(fbp, screensize);
        close(fb_fd);
        return 1;
    }
    
//    printf("Listening for UDP packets on port %d...\n", PORT);
    
    while (1) {
        uint8_t buffer[BUFFER_SIZE];
        socklen_t client_len = sizeof(client_addr);
        int recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&client_addr, &client_len);
        
        if (recv_len < 0) {
            perror("Error receiving data");
            continue;
        } else {
	   //printf("received %d\n\r", recv_len);
	}

	    set_pixel(fbp, 200, 200, 0xFF08, vinfo, finfo);          

        
        if (buffer[0] == 1) { // Type 1 = Set Pixel
            int x = (buffer[1] << 8) | buffer[2];
            int y = (buffer[3] << 8) | buffer[4];
            uint16_t color = (buffer[5] << 8) | buffer[6];

	    set_pixel(fbp, x, y, color, vinfo, finfo);          
  
            if (x >= 0 && x < width && y >= 0 && y < height) {
                fbp[y * width + x] = color;
            }

//	   printf("colour set\n\r");

        }
//	printf("buf %02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6]);

    }
    
    close(sockfd);
    munmap(fbp, screensize);
    close(fb_fd);
    return 0;
}
